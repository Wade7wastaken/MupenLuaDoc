import markdown
import json
import re

# TODO:
# - include global functions
# - (maybe) use something like beautifulsoup to generate html instead of just
#   strings

output_html_header = '''<!DOCTYPE html>
<html>
<head>
    <title>Mupen Lua API Docs</title>
    <link href="css/styles.css" type="text/css" rel="stylesheet">
    <link href="css/pygments.css" type="text/css" rel="stylesheet">
    <meta charset="UTF-8">
</head>
<body>
    <div class="sidebar">
        <center><img src="img/mupen_logo.png"><br>
        mupen64-rr-lua docs</center><br>
'''


def read_funcs_from_cpp_file():
    func_type_pattern = re.compile(
        r'const luaL_Reg (?P<func_type>[A-Za-z]+)Funcs\[\]')
    func_name_pattern = re.compile(r'\{"(?P<func_name>[A-Za-z0-9]+)",.*\}')

    func_list_dict = {}

    with open('LuaConsole.cpp', 'r', encoding='utf-8') as file:
        # if we're far enough into the file to start caring
        in_function_region = False
        func_type = ''
        for line in file:
            # Start at first line of Lua emu func arrays
            # this would have to be changed to include global functions
            if line == 'const luaL_Reg emuFuncs[] = {\n':
                in_function_region = True
            # Stop at end of namespace
            if line == '}	//namespace\n':
                break
            if in_function_region:
                # If we're iterating over a function name line...
                if ',' in line and 'NULL' not in line:
                    func_name = func_name_pattern.search(
                        line).group('func_name')
                    func_list_dict[func_type].append(func_name)
                # If we're iterating over a function list line...
                elif '[' in line:
                    func_type = func_type_pattern.search(
                        line).group('func_type')
                    func_list_dict[func_type] = []

    return func_list_dict


func_list_dict = read_funcs_from_cpp_file()

with open('docs/index.html', 'w+') as file:
    file.write(output_html_header)
    # loop over function types (emu, wgui)
    for func_type in func_list_dict:
        file.write(
            f'        <button class="collapsible"><a href="#{func_type}Funcs"">{func_type.upper()} FUNCTIONS</a></button>\n            <div class="funcList">')
        for func_name in func_list_dict[func_type]:
            file.write(f'''\n                <button class="funcListItem">
                    <a href="#{func_type}{func_name.capitalize()}">{func_type.upper()}.{func_name.upper()}</a>
                </button>''')
        file.write('\n            </div>\n')
    file.write('    </div>\n</body>\n</html>\n')
    file.write('<div class="docBody">\n')
    # read in the json into data
    with open("export/doc.json", "rt") as f:
        data = json.loads(f.read())
    # only accept documentation from file paths ending in this
    api_filename_ending = "api.lua"
    prev_func_type = None
    # data is an array with all the variables
    for variable in data:
        # store the name of the variable
        variable_name = variable["name"]
        # each variable can have multiple definitions (print has 2, one is for mupen and one is the regular lua one)
        for definition in variable["defines"]:
            # get the source file name for every definition
            file_name = definition["file"]
            # only process the definition if it is one we want
            if file_name.endswith(api_filename_ending):
                # only process functions (ill loosen this a bit later)
                variable_type = definition["extends"]["type"]
                if variable_type == "function":
                    # write markdown code similar to the code generated by LuaLS
                    if '.' in variable_name:
                        func_type, func_name = variable_name.split('.')
                        # print section header for each function type
                        section_header = ''
                        if func_type != prev_func_type:
                            section_header = f'---\n# <a id="{func_type}Funcs">{func_type.upper()}</a> FUNCTIONS'
                            prev_func_type = func_type
                        variable_anchor = f'<a id="{func_type}{func_name.capitalize()}">'
                    else:
                        variable_anchor = f'<a id="{variable_name}">'
                    html = markdown.markdown(f'''{section_header}
---

# {variable_anchor}{variable_name}</a>

{definition["extends"]["desc"]}


```lua
{definition["extends"]["view"]}
```


''', extensions=['fenced_code', 'codehilite'])
                    file.write(html)

    file.write('\n</div>\n')
    file.write('''<script>
    var coll = document.getElementsByClassName("collapsible");
    var i;
    
    for (i = 0; i < coll.length; i++) {
      coll[i].addEventListener("click", function() {
        this.classList.toggle("active");
        var content = this.nextElementSibling;
        if (content.style.maxHeight){
          content.style.maxHeight = null;
        } else {
          content.style.maxHeight = content.scrollHeight + "px";
        } 
      });
    }
</script>''')
